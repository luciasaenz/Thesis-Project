# Figure 3 - Find if any HLA Class I allele is associated with longer or shorter survival times through permutation tests

library(tidyverse)
library(readxl)

# Plot Function

plot_permutation_density <- function(observed_value, permuted_values, allele_name, p_value, direction = "greater", label = "HLA") {
  permuted_values <- na.omit(permuted_values)
  
  # Increase left margin to prevent Y-axis label cutoff
  old_par <- par(no.readonly = TRUE)
  on.exit(par(old_par))
  par(mar = c(5, 6, 4, 2))  # Bottom, left, top, right
  
  hist(permuted_values,
       col = rgb(0, 1, 0, 0.3),
       border = "black",
       prob = TRUE,
       xlab = paste("Median permuted survival time for", paste(label, allele_name), "in months "),
       main = paste("Permutation test for", paste(label, allele_name)),
       cex.axis = 1.5, cex.lab = 1.8, cex.main = 2)
  
  dens <- density(permuted_values, adjust = 2.5)
  lines(dens, col = "darkgreen", lwd = 4)
  
  if (direction == "greater") {
    polygon(c(dens$x[dens$x >= observed_value], observed_value),
            c(dens$y[dens$x >= observed_value], 0),
            col = rgb(1, 0, 0, 0.3), border = NA)
  } else {
    polygon(c(dens$x[dens$x <= observed_value], observed_value),
            c(dens$y[dens$x <= observed_value], 0),
            col = rgb(1, 0, 0, 0.3), border = NA)
  }
  
  abline(v = observed_value, col = "#B00000", lwd = 3)  # Darker but still true red
  
  text(x = observed_value * 0.75, # Adjust this depending on your density curve 
       y = max(dens$y) *1,    # Adjust this depending on your density curve 
       labels = paste("Observed survival\n time:", round(observed_value, 0), "months",
                      "\n\nEmpirical\n p-value:", round(p_value, 2)),
       col = "#B00000", cex = 1.5, adj = c(0.5, 0.5), font = 2)  # Bigger, bold, and redder
}



# Permutation Median Function
get_permuted_medians <- function(data, time_col, allele_col, num_permutations = 10000) {
  times <- data[[time_col]]
  permuted_list <- vector("list", num_permutations)
  
  for (i in seq_len(num_permutations)) {
    data[[time_col]] <- sample(times)
    permuted_list[[i]] <- data %>%
      group_by(!!sym(allele_col)) %>%
      summarise(median_survival_time = median(.data[[time_col]], na.rm = TRUE), .groups = "drop")
  }
  
  bind_rows(permuted_list, .id = "permutation") %>%
    rename(allele = !!sym(allele_col))
}

# Empirical P-value Calculator
calculate_empirical_p_values_auto <- function(observed_df, permuted_df) {
  cohort_median <- median(observed_df$median_survival_time, na.rm = TRUE)
  
  observed_df %>%
    rowwise() %>%
    mutate(
      direction = ifelse(median_survival_time >= cohort_median, "greater", "less"),
      effect = ifelse(direction == "greater", "Protective", "Risk"),
      p_value = if (direction == "greater") {
        mean(permuted_df %>% filter(allele == allele) %>% pull(median_survival_time) >= median_survival_time)
      } else {
        mean(permuted_df %>% filter(allele == allele) %>% pull(median_survival_time) <= median_survival_time)
      }
    )
}

# Analysis Function

run_hla_analysis <- function(data,
                             time_col,                  # Name of the column with survival time
                             hla_locus = NULL,          # "A", "B", or "C" (for discovery)
                             allele_column = NULL,      # Used for validation data
                             p_cutoff = 0.05,           # Significance threshold for p-values
                             label = "HLA",             # Label for plots (e.g., "HLA-B")
                             num_permutations = 10000,  # Number of permutations for null distribution
                             convert_days_to_months = FALSE,  # Whether to convert survival time from days to months
                             plot_allele = NULL) {      # Allele to plot
  
  if (!is.null(hla_locus)) {                            # Discovery survival times seem to be in days, transform them to month to be comparable with the validation cohort
    if (convert_days_to_months) {
      data[[time_col]] <- data[[time_col]] / 30.437
    }
    
    locus_cols <- paste0("hla.", tolower(hla_locus), c("1", "2")) 
    data_long <- data %>%
      select(all_of(c(locus_cols, time_col))) %>%
      pivot_longer(cols = all_of(locus_cols), names_to = "locus", values_to = "allele")
    
    allele_col <- "allele"
    
  } else if (!is.null(allele_column)) {
    data_long <- data %>%
      select(all_of(c(allele_column, time_col))) %>%
      filter(!is.na(.data[[allele_column]]))
    allele_col <- allele_column
    
  } else {
    stop("Provide either `hla_locus` or `allele_column`.")
  }
  
  observed <- data_long %>%
    group_by(!!sym(allele_col)) %>%
    summarise(median_survival_time = median(.data[[time_col]], na.rm = TRUE), .groups = "drop") %>%
    rename(allele = !!sym(allele_col))
  
  permuted <- get_permuted_medians(data_long, time_col, allele_col, num_permutations) #Creates the null distribution by permuting survival times and calculating median survival for each allele
  empirical <- calculate_empirical_p_values_auto(observed, permuted) # Compares observed vs permuted medians, for each allele
  significant <- empirical %>% filter(p_value < p_cutoff) # Keeps only alleles with significant empirical p-values
  
  print(significant)
  
  # Plot logic
  if (!is.null(plot_allele)) {
    if (!(plot_allele %in% empirical$allele)) {
      message("Allele not found: ", plot_allele)
      return(NULL)
    }
    plot_data <- empirical %>% filter(allele == plot_allele)
    obs_value <- observed %>% filter(allele == plot_data$allele) %>% pull(median_survival_time) # Gets the observed median survival time for the selected allel
    perm_values <- permuted %>% filter(allele == plot_data$allele) %>% pull(median_survival_time) # Gets all the permuted survival medians for this allele
    
    plot_permutation_density(obs_value, perm_values, plot_data$allele, plot_data$p_value, direction = plot_data$direction, label = label) # Makes the plot
  }
}  

discovery <- read_excel("discovery_data.xlsx") # Reads the excel file containing the discovery set
  
# Runs the permutation function with the discovery set
run_hla_analysis(
  data = discovery,
  time_col = "overall_survival",
  hla_locus = "C",              # can be "A", "B", or "C" depending on the HLA locus
  convert_days_to_months = TRUE,
  p_cutoff = 0.10,
  label = NULL,
  num_permutations = 10000,
  plot_allele = NULL        # Change to any allele or NULL if you don't want the plot
)
  
# Reads the excel file containing the validation set and adjust it to be able to apply the function
validation <- read_excel("validation_data.xlsx") %>%
  filter(`Cancer Type` == "Melanoma", `Drug Class` == "CTLA-4") %>%
  separate_rows(`HLA Class I Alleles`, sep = ",") %>%
  rename(allele = `HLA Class I Alleles`) %>%
  mutate(OS_Months = as.numeric(OS_Months)) %>%
  filter(!is.na(OS_Months))
  
# Runs the permutation function with the validation set
run_hla_analysis(
  data = validation,
  time_col = "OS_Months",
  allele_column = "allele",
  p_cutoff = 0.05,
  label = "HLA-",
  num_permutations = 10000,
  plot_allele = "A2901"         # Change to any allele or NULL
)
