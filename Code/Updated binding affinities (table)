Table - Updated Binding Affinities with the latest version of NetMHCpan


## Upload libraries 
library(dplyr)   
library(openxlsx) 
library(tidyverse)
library(readxl)
library(openxlsx)

## Load and clean NetMHCpan predictions for each patient

data_dir <- "/Users/User1/Desktop/MBLS_3_year/Thesis/Trygithub/BA_predictions" # Adapt this to the directory where you stored all the binding affinity predictions that you got with the NetpanMHC software
file_list <- list.files(path = data_dir, pattern = "_predictions$", full.names = TRUE)

all_patients_raw <- list()

for (file_path in file_list) {
  patient_id <- gsub("_predictions", "", basename(file_path))
  
  hla_data <- read.table(file_path,
                         header = FALSE, sep = "", fill = TRUE, skip = 6,
                         strip.white = TRUE, stringsAsFactors = FALSE)
  
  # Select and clean key columns
  cleaned <- hla_data %>%
    select(HLA = V2, Neoantigen = V3, Rank_BA = V15, Affinity_nM = V16) %>%
    filter(!is.na(HLA), HLA != "", HLA != ":") %>%
    filter(!grepl("[^0-9.]", Rank_BA), !grepl("[^0-9.]", Affinity_nM)) %>%
    mutate(
      Rank_BA = as.numeric(Rank_BA),
      Affinity_nM = as.numeric(Affinity_nM)
    )
  
  all_patients_raw[[patient_id]] <- cleaned
}

## Format predictions per patient & neoantigen

all_patients_data <- list()

for (patient_id in names(all_patients_raw)) {
  selected_data <- all_patients_raw[[patient_id]]
  
  # Remove fake neoantigens (e.g., HLAXXXXX)
  selected_data <- selected_data %>%
    filter(!grepl("^HLAX", Neoantigen)) 
  
  formatted_data <- selected_data %>%
    group_by(Neoantigen) %>%
    arrange(Rank_BA) %>%
    distinct(HLA, .keep_all = TRUE) %>%
    slice_head(n = 6) %>%
    group_split()
  
  # Build clean rows per neoantigen
  patient_rows <- lapply(formatted_data, function(group) {
    neo <- unique(group$Neoantigen)
    row_result <- list(Patient_ID = patient_id, Neoantigen = neo)
    
    for (i in seq_len(nrow(group))) {
      row_result[[paste0("HLA_", i)]] <- group$HLA[i]
      row_result[[paste0("Rank_BA_", i)]] <- group$Rank_BA[i]
      row_result[[paste0("Affinity_nM_", i)]] <- group$Affinity_nM[i]
    }
    
    return(row_result)
  })
  
  all_patients_data <- append(all_patients_data, list(bind_rows(patient_rows)))
}


## Combine and find best rank & affinity: choose the best HLA per neoantigen

final_df <- bind_rows(all_patients_data)

final_df <- final_df %>%
  rowwise() %>%
  mutate(
    Lowest_Rank_BA = min(c_across(starts_with("Rank_BA")), na.rm = TRUE),
    Lowest_Rank_HLA = {
      ranks <- c_across(starts_with("Rank_BA"))
      hlas <- c_across(starts_with("HLA"))
      if (all(is.na(ranks))) NA else hlas[which.min(ranks)]
    },
    Lowest_Affinity_NM = min(c_across(starts_with("Affinity_nM")), na.rm = TRUE),
    Lowest_Affinity_HLA = {
      affinities <- c_across(starts_with("Affinity_nM"))
      hlas <- c_across(starts_with("HLA"))
      if (all(is.na(affinities))) NA else hlas[which.min(affinities)]
    }
  ) %>%
  ungroup() %>%
  mutate(Same_HLA_Lowest = Lowest_Rank_HLA == Lowest_Affinity_HLA)


## Merge with van Allen (outdated) predictions 

neoantigen_patients <- read_csv("/Users/User1/Desktop/MBLS_3_year/Thesis/1st_paper/tables4_revised.csv")

our_table_merged <- final_df %>%
  left_join(
    neoantigen_patients %>%
      select(peptide_mut, hla, affinity_mut),
    by = c("Neoantigen" = "peptide_mut") # Merged through the neoantigen column, which is "peptide_mut" in Van Allen's table
  ) %>%
  rename(
    HLA_van_Allen = hla,
    affinity_van_Allen = affinity_mut
  )


## Compare if both prediction sets select the same HLA allele as the top binder 

# Function to adapt the Van Allen notation, according to the official HLA notation
convert_hla_format <- function(hla_column) {
  gsub("^(HLA-[A-Z])([0-9]+:)", "\\1*\\2", hla_column)
}

our_table_merged$HLA_van_Allen <- convert_hla_format(our_table_merged$HLA_van_Allen) # Apply function to the Van Allen HLA column of the merged tables

compared_predictions <- our_table_merged %>% 
  mutate(Same_best_HLA = HLA_van_Allen == Lowest_Affinity_HLA)


## Save Final Output

output_file <- "Final_BA_predictions_trygithub.xlsx"
write.xlsx(compared_predictions, output_file, rowNames = FALSE)
